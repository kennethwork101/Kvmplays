---

# role_load_uvprog2025/tasks/main.yml

- name: Setup block
  block:
    - name: Get Ubuntu version
      shell: "lsb_release -rs"
      register: ubuntu_version
      changed_when: false

    - name: Set Python version based on override if provided
      set_fact:
        python_version: "{{ python_version_override }}"
      when: python_version_override is defined and python_version_override | length > 0

    - name: Set Python version based on Ubuntu version if no override
      set_fact:
        python_version: "{{ python_versions[ubuntu_version.stdout] | default(default_python_version) }}"
      when: python_version_override is not defined or python_version_override | length == 0

    - name: Display selected Python version
      debug:
        msg: "Using Python {{ python_version }} {{ 'from override' if python_version_override is defined and python_version_override | length > 0 else 'based on Ubuntu ' + ubuntu_version.stdout }}"

    - name: Get user home directory
      include_role:
        name: role_common
        tasks_from: user_info.yml

    - name: Set project paths
      set_fact:
        project_root: "{{ user_home }}/{{ uvprog }}"
        user_local_bin: "{{ user_home }}/.local/bin"

# ### Keep this commented out code is when testme is used to determine effective_concurrent_run
# - name: Set concurrency based on test type and target VMs
#   set_fact:
#     effective_concurrent_runs: "{{ concurrent_runs | int }}"
#   when: (target_vm is defined and target_vm | length > 0) or (include_testme | bool)

# - name: Set single VM concurrency when running standard tests
#   set_fact:
#     effective_concurrent_runs: "{{ single_vm_run | int }}"
#   when: (target_vm is not defined or target_vm | length == 0) and not (include_testme | bool)

# - name: Ensure effective_concurrent_runs is set
#   set_fact:
#     effective_concurrent_runs: "{{ concurrent_runs | int }}"
#   when: effective_concurrent_runs is not defined

- name: Set concurrency based on target VM
  set_fact:
    effective_concurrent_runs: "{{ single_vm_run | int }}"
  when: target_vm is defined and target_vm | length > 0

- name: Set default concurrency when not targeting specific VMs
  set_fact:
    effective_concurrent_runs: "{{ concurrent_runs | int }}"
  when: target_vm is not defined or target_vm | length == 0

- name: Ensure effective_concurrent_runs is set
  set_fact:
    effective_concurrent_runs: "{{ concurrent_runs | int }}"
  when: effective_concurrent_runs is not defined

- name: Display concurrency setting
  debug:
    msg: "Running with concurrency: {{ effective_concurrent_runs }} VM(s) at a time"

- name: Python installation preparation
  block:
    - name: Add deadsnakes PPA for Ubuntu < 24.04
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present
        update_cache: yes
      become: yes
      when:
        - ansible_distribution == 'Ubuntu'
        - ubuntu_version.stdout is version('24.04', '<')

- name: Python installation block
  block:
    # Try installing Python 3.11 with error handling
    - name: Try installing Python 3.11
      apt:
        name:
          - python3.11
          - python3.11-venv
        state: present
        update_cache: yes
      become: yes
      register: python311_install
      ignore_errors: yes
      when:
        - ansible_distribution == 'Ubuntu'

    # Try installing Python 3.12 with error handling
    - name: Try installing Python 3.12
      apt:
        name:
          - python3.12
          - python3.12-venv
        state: present
        update_cache: yes
      become: yes
      register: python312_install
      ignore_errors: yes
      when:
        - ansible_distribution == 'Ubuntu'

    # Try installing Python 3.10 with error handling
    - name: Try installing Python 3.10
      apt:
        name:
          - python3.10
          - python3.10-venv
        state: present
        update_cache: yes
      become: yes
      register: python310_install
      ignore_errors: yes
      when:
        - ansible_distribution == 'Ubuntu'
        - ubuntu_version.stdout is version('24.04', '<')

    # Display summary of what was installed
    - name: Summarize Python installation
      debug:
        msg: |
          Python installation summary:
          - Python 3.10: {{ 'Installed' if python310_install is defined and python310_install.changed else 'Failed or skipped' }}
          - Python 3.11: {{ 'Installed' if python311_install is defined and python311_install.changed else 'Failed or skipped' }}
          - Python 3.12: {{ 'Installed' if python312_install is defined and python312_install.changed else 'Failed or skipped' }}

    # Set fallback Python versions if needed
    - name: Check available Python versions
      shell: |
        set -e
        for version in python3.12 python3.11 python3.10 python3.9 python3.8; do
          if command -v $version >/dev/null 2>&1; then
            echo "$version"
            exit 0
          fi
        done
        # Default to system python3
        echo "python3"
      register: available_python
      changed_when: false

    - name: Display detected Python version
      debug:
        msg: "Most recent available Python version: {{ available_python.stdout }}"

    # Update the Python version mapping based on what's actually available
    - name: Set available Python version
      set_fact:
        available_python_version: "{{ available_python.stdout | regex_replace('python', '') }}"
      when: available_python.stdout != "python3"

    - name: Set fallback Python version
      set_fact:
        fallback_python_version: "{{ available_python_version | default('3') }}"

- name: Directory setup block
  block:
    - name: Create project directory structure
      ansible.builtin.file:
        path: "{{ project_root }}"
        state: directory
        mode: "{{ default_file_mode }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      become: yes

    - name: Create __init__.py file
      file:
        path: "{{ project_root }}/__init__.py"
        state: touch
        mode: "{{ default_restricted_mode }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      become: yes

- name: Git repository management
  block:
    - name: Check existing directories
      stat:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
      loop: "{{ git_repos }}"
      register: dir_check
      become: yes

    - name: List directories that will be removed
      debug:
        msg: "Found existing directory: {{ item.stat.path }} (Will {{ 'be removed' if delete_repo | default(true) else 'be kept' }})"
      loop: "{{ dir_check.results }}"
      when: item.stat.exists

    - name: Remove existing directories
      file:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        state: absent
      loop: "{{ git_repos }}"
      become: yes
      when:
        - dir_check.results | map(attribute='stat.exists') | select | list | length > 0
        - delete_repo | default(true)
      register: remove_result

    - name: Wait for directory removal to complete
      wait_for:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        state: absent
        timeout: 30
      loop: "{{ git_repos }}"
      when:
        - remove_result.changed | default(false)
        - delete_repo | default(true)
      become: yes

    - name: Clone git repositories
      git:
        repo: "{{ item }}"
        dest: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        clone: yes
        update: yes
        force: yes
      loop: "{{ git_repos }}"
      register: git_clone_result
      become: yes
      become_user: "{{ username }}"
      throttle: "{{ effective_concurrent_runs }}"
      when:
        - (not dir_check.results | map(attribute='stat.exists') | select | list | length > 0) or (delete_repo | default(true))

    - name: Set repository permissions
      file:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        mode: "{{ default_file_mode }}"
      loop: "{{ git_repos }}"
      become: yes
      when: git_clone_result.changed | default(false)

- name: Python environment setup
  block:
    - name: Pin Python version for uv
      shell: |
        if [[ ! -f .python-version ]] || [[ $(cat .python-version) != "{{ python_version }}" ]]; then
          uv python pin {{ python_version }}
        fi
      args:
        chdir: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        executable: /bin/bash
      loop: "{{ git_repos }}"
      become: yes
      become_user: "{{ username }}"
      environment:
        PATH: "{{ user_local_bin }}:{{ ansible_env.PATH }}"
      register: uv_python_pin_result
      changed_when: uv_python_pin_result.rc == 0
      failed_when:
        - uv_python_pin_result.rc != 0
        - "'already exists' not in uv_python_pin_result.stderr"

    - name: Set .python-version permissions
      file:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}/.python-version"
        state: file
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      loop: "{{ git_repos }}"
      become: yes

- name: Package management
  block:
    - name: Run uv sync operations
      shell: "{{ item.1.cmd }}"
      args:
        chdir: "{{ project_root }}/{{ (item.0 | basename | splitext)[0] }}"
        executable: /bin/bash
      become: yes
      become_user: "{{ username }}"
      environment:
        PATH: "{{ user_local_bin }}:{{ ansible_env.PATH }}"
      with_nested:
        - "{{ git_repos }}"
        - - { cmd: "uv sync", name: "basic sync" }
          - { cmd: "uv sync --extra dev", name: "dev dependencies sync" }
      register: uv_sync_results
      changed_when: uv_sync_results.rc == 0
      failed_when:
        - uv_sync_results.rc != 0
        - "'already synchronized' not in uv_sync_results.stderr"

- name: Final permissions setup
  block:
    - name: Ensure correct permissions for project root
      file:
        path: "{{ project_root }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        mode: "{{ default_file_mode }}"
      become: yes

    - name: Ensure correct permissions for repository directories and venvs
      file:
        path: "{{ project_root }}/{{ (item.0 | basename | splitext)[0] }}{{ item.1 }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        mode: "{{ default_file_mode }}"
      with_nested:
        - "{{ git_repos }}"
        - ["", "/.venv"]
      become: yes
      ignore_errors: yes  # In case .venv doesn't exist for some repos


- name: Cleanup previous test outputs
  block:
    - name: Remove previous test outputs
      file:
        path: "{{ project_root }}/{{ (item.0 | basename | splitext)[0] }}/{{ item.1 }}"
        state: absent
      with_nested:
        - "{{ git_repos }}"
        - ["pytest_output.log", "test_results.xml"]
      become: yes
      become_user: "{{ username }}"

- name: Testing preparation
  block:
    # ### Keep this commented out code is when testme is used to determine effective_concurrent_run
    # - name: Set concurrency based on include_testme and target_vm
    #   set_fact:
    #     effective_concurrent_runs: "{% if target_vm is defined and target_vm | length > 0 %}{{ single_vm_run }}{% else %}{{ concurrent_runs }}{% endif %}"

    - name: Record test start time
      set_fact:
        test_start_time: "{{ ansible_date_time.iso8601 }}"
      when: ansible_check_mode is not defined or not ansible_check_mode

    - name: Set up pytest_cmd (simplified)
      set_fact:
        testme_arg: "{% if include_testme | bool %}'testme and not vectordbfew and not vectordball and not chroma'{% else %}'not testme and not vectordbfew and not vectordball and not chroma'{% endif %}"

    - name: Build final pytest command
      set_fact:
        pytest_cmd: "uv run pytest -v --run_type one -m {{ testme_arg }} --timeout=3600 --junitxml=test_results.xml | tee pytest_output.log"

    - name: Show final pytest command
      debug:
        msg: "Final command: {{ pytest_cmd }}"

    - name: Print timestamp before running pytest
      debug:
        msg: "Starting pytest at {{ ansible_date_time.iso8601 }}"

    - name: VERIFICATION - Print unique identifier to confirm this is the updated code
      debug:
        msg: "Running UPDATED solution for SSH Git URLs - VERSION 2023-02-27-3"

    - name: Debug include_testme value
      debug:
        msg: "include_testme value: {{ include_testme | default('not set') }} ({{ include_testme | bool }})"

    - name: Debug expanded pytest command
      set_fact:
        expanded_pytest_cmd: "uv run pytest -v --run_type one -m {% if include_testme | bool %}'testme and not vectordbfew and not vectordball and not chroma'{% else %}'not testme and not vectordbfew and not vectordball and not chroma'{% endif %} --timeout=3600 --junitxml=test_results.xml | tee pytest_output.log"

    - name: Show expanded command
      debug:
        msg: "Expanded pytest command: {{ expanded_pytest_cmd }}"

    - name: List available pytest tests
      shell: |
        source .venv/bin/activate && python -m pytest --collect-only -v | grep -c 'collected'
      args:
        chdir: "{{ user_home }}/{{ uvprog }}/{{ item }}"
        executable: /bin/bash
      loop: "{{ git_repos | map('basename') | map('splitext') | map('first') | list }}"
      register: test_collection
      become: yes
      become_user: "{{ username }}"
      ignore_errors: yes

    - name: Check for 'testme' marked tests
      shell: |
        source .venv/bin/activate && python -m pytest -v -m testme --collect-only 2>&1 | grep -c 'collected'
      args:
        chdir: "{{ user_home }}/{{ uvprog }}/{{ item }}"
        executable: /bin/bash
      loop: "{{ git_repos | map('basename') | map('splitext') | map('first') | list }}"
      register: testme_count
      become: yes
      become_user: "{{ username }}"
      ignore_errors: yes

    - name: Debug actual pytest command
      shell: |
        echo "PYTEST_CMD: {{ pytest_cmd }}" > /tmp/debug_pytest_cmd.txt
        echo "INCLUDE_TESTME: {{ include_testme | bool }}" >> /tmp/debug_pytest_cmd.txt
      become: yes
      become_user: "{{ username }}"

- name: Run pytest with virtual environment
  shell: |
    echo "Starting pytest execution in $(pwd) at $(date)" > /tmp/pytest_debug_{{ item | basename | regex_replace('[^a-zA-Z0-9]', '') }}.log
    source .venv/bin/activate && {{ pytest_cmd }}
    echo "Completed pytest execution at $(date)" >> /tmp/pytest_debug_{{ item | basename | regex_replace('[^a-zA-Z0-9]', '') }}.log
  args:
    chdir: "{{ user_home }}/{{ uvprog }}/{{ (item | basename | splitext)[0] }}"
    executable: /bin/bash
  async: 7200  # Run the task asynchronously with a timeout of 2 hours
  poll: 30     # Poll for the status every 30 seconds
  become: yes
  become_user: "{{ username }}"
  environment:
    PATH: "{{ user_home }}/.local/bin:{{ ansible_env.PATH }}"
    PYTHONPATH: "{{ user_home }}/{{ uvprog }}/{{ (item | basename | splitext)[0] }}"
  loop: "{{ git_repos }}"
  throttle: "{{ effective_concurrent_runs }}"
  register: pytest_result

- name: Check job status with timestamps (best effort)
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished | default(false)
  retries: 240
  delay: 30
  loop: "{{ pytest_result.results }}"
  ignore_errors: yes

- name: Check job status with timestamps
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished | default(false)
  retries: 240
  delay: 30
  loop: "{{ pytest_result.results }}"
  ignore_errors: yes
