---

# role_load_uvprog2025/tasks/main.yml

- name: Setup block
  block:
    - name: Get Ubuntu version
      shell: "lsb_release -rs"
      register: ubuntu_version
      changed_when: false

    - name: Set Python version based on Ubuntu version
      set_fact:
        python_version: "{{ python_versions[ubuntu_version.stdout] | default(default_python_version) }}"

    - name: Display selected Python version
      debug:
        msg: "Using Python {{ python_version }} based on Ubuntu {{ ubuntu_version.stdout }}"

    - name: Get home directory of the user
      shell: "getent passwd {{ username }} | cut -d: -f6"
      register: user_home
      changed_when: false

    - name: Set project paths
      set_fact:
        project_root: "{{ user_home.stdout }}/{{ uvprog }}"
        user_local_bin: "{{ user_home.stdout }}/.local/bin"

- name: Python installation preparation
  block:
    - name: Add deadsnakes PPA for Ubuntu < 24.04
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present
        update_cache: yes
      become: yes
      when:
        - ansible_distribution == 'Ubuntu'
        - ubuntu_version.stdout is version('24.04', '<')

- name: Python installation block
  block:
    - name: Install Python for Ubuntu 20.04
      apt:
        name:
          - python3.11
          - python3.11-venv
        state: present
        update_cache: yes
      become: yes
      when:
        - ansible_distribution == 'Ubuntu'
        - ubuntu_version.stdout == '20.04'

    - name: Install Python for Ubuntu 22.04
      apt:
        name:
          - python3.11
          - python3.11-venv
        state: present
        update_cache: yes
      become: yes
      when:
        - ansible_distribution == 'Ubuntu'
        - ubuntu_version.stdout == '22.04'

    - name: Install Python for Ubuntu 24.04/24.10
      apt:
        name:
          - python3.12
          - python3.12-venv
        state: present
        update_cache: yes
      become: yes
      when:
        - ansible_distribution == 'Ubuntu'
        - ubuntu_version.stdout is version('24.04', '>=')

- name: Directory setup block
  block:
    - name: Create project directory structure
      ansible.builtin.file:
        path: "{{ project_root }}"
        state: directory
        mode: "{{ default_file_mode }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      become: yes

    - name: Create __init__.py file
      file:
        path: "{{ project_root }}/__init__.py"
        state: touch
        mode: "{{ default_restricted_mode }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      become: yes

- name: Git repository management
  block:
    - name: Remove existing repositories
      file:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        state: absent
      loop: "{{ git_repos }}"
      become: yes
      become_user: "{{ username }}"

    - name: Clone git repositories
      git:
        repo: "{{ item }}"
        dest: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        clone: yes
        update: yes
        force: yes
      loop: "{{ git_repos }}"
      register: git_clone_result
      become: yes
      become_user: "{{ username }}"
      throttle: "{{ concurrent_runs }}"

    - name: Set repository permissions
      file:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        mode: "{{ default_file_mode }}"
      loop: "{{ git_repos }}"
      become: yes
      when: git_clone_result.changed | default(false)

- name: Python environment setup
  block:
    - name: Pin Python version for uv
      shell: |
        if [[ ! -f .python-version ]] || [[ $(cat .python-version) != "{{ python_version }}" ]]; then
          uv python pin {{ python_version }}
        fi
      args:
        chdir: "{{ project_root }}/{{ (item | basename | splitext)[0] }}"
        executable: /bin/bash
      loop: "{{ git_repos }}"
      become: yes
      become_user: "{{ username }}"
      environment:
        PATH: "{{ user_local_bin }}:{{ ansible_env.PATH }}"
      register: uv_python_pin_result
      changed_when: uv_python_pin_result.rc == 0
      failed_when:
        - uv_python_pin_result.rc != 0
        - "'already exists' not in uv_python_pin_result.stderr"

    - name: Set .python-version permissions
      file:
        path: "{{ project_root }}/{{ (item | basename | splitext)[0] }}/.python-version"
        state: file
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      loop: "{{ git_repos }}"
      become: yes

- name: Package management
  block:
    - name: Run uv sync operations
      shell: "{{ item.1.cmd }}"
      args:
        chdir: "{{ project_root }}/{{ (item.0 | basename | splitext)[0] }}"
        executable: /bin/bash
      become: yes
      become_user: "{{ username }}"
      environment:
        PATH: "{{ user_local_bin }}:{{ ansible_env.PATH }}"
      with_nested:
        - "{{ git_repos }}"
        - - { cmd: "uv sync", name: "basic sync" }
          - { cmd: "uv sync --extra dev", name: "dev dependencies sync" }
      register: uv_sync_results
      changed_when: uv_sync_results.rc == 0
      failed_when:
        - uv_sync_results.rc != 0
        - "'already synchronized' not in uv_sync_results.stderr"

- name: Final permissions setup
  block:
    - name: Ensure correct permissions for project root
      file:
        path: "{{ project_root }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        mode: "{{ default_file_mode }}"
      become: yes

    - name: Ensure correct permissions for repository directories and venvs
      file:
        path: "{{ project_root }}/{{ (item.0 | basename | splitext)[0] }}{{ item.1 }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        mode: "{{ default_file_mode }}"
      with_nested:
        - "{{ git_repos }}"
        - ["", "/.venv"]
      become: yes
      ignore_errors: yes  # In case .venv doesn't exist for some repos

# - name: Testing preparation
#   block:
  #   - name: pytest_cme
  #     set_fact:
  #       pytest_cmd: "uv run pytest -v -s --run_type one -m 'testme and not vectordbfew and not vectordball and not chroma' --timeout=300 --junitxml=test_results.xml | tee pytest_output.log"
  #       # pytest_cmd: "uv run pytest -v --run_type one -m 'testme and not vectordbfew and not vectordball and not chroma' --timeout=120 --junitxml=test_results.xml | tee pytest_output.log"

    # - name: Record test start time
    #   set_fact:
    #     test_start_time: "{{ ansible_date_time.iso8601 }}"
    #   when: ansible_check_mode is not defined or not ansible_check_mode

    # - name: Log test start
    #   debug:
    #     msg: "Starting pytest at {{ test_start_time }}"
    #   when: ansible_check_mode is not defined or not ansible_check_mode


- name: Record test start time
  set_fact:
    test_start_time: "{{ ansible_date_time.iso8601 }}"
  when: ansible_check_mode is not defined or not ansible_check_mode

- name: Log test start
  debug:
    msg: "Starting pytest at {{ test_start_time }}"
  when: ansible_check_mode is not defined or not ansible_check_mode

- name: pytest_cme
  set_fact:
    pytest_cmd: "uv run pytest -v -s --run_type one -m 'testme and not vectordbfew and not vectordball and not chroma' --timeout=900 --junitxml=test_results.xml | tee pytest_output.log"
- name: Print timestamp before running pytest
  debug:
    msg: "Starting pytest at {{ ansible_date_time.iso8601 }}"

- name: VERIFICATION - Print unique identifier to confirm this is the updated code
  debug:
    msg: "Running UPDATED solution for SSH Git URLs - VERSION 2023-02-27-3"


# First display task can stay in a block if needed
- name: Display successful repositories
  debug:
    msg: "Repositories available for testing: {{ successful_repos | default(['None']) }}"










# # Original synchronous block
# - name: Run pytest only for successfully cloned repositories
#   block:
#     - name: Display successful repositories
#       debug:
#         msg: "Repositories available for testing: {{ successful_repos | default(['None']) }}"

#     - name: Run pytest with virtual environment (synchronous)
#       shell: |
#         echo "Starting pytest execution in $(pwd) at $(date)" > /tmp/pytest_debug_{{ item | basename | regex_replace('[^a-zA-Z0-9]', '') }}.log
#         source .venv/bin/activate && {{ pytest_cmd }}
#         echo "Completed pytest execution at $(date)" >> /tmp/pytest_debug_{{ item | basename | regex_replace('[^a-zA-Z0-9]', '') }}.log
#       args:
#         chdir: "{{ user_home.stdout }}/{{ uvprog }}/{{ (item | basename | splitext)[0] }}"
#         executable: /bin/bash
#       become: yes
#       become_user: "{{ username }}"
#       environment:
#         PATH: "/home/kenneth/.local/bin:{{ ansible_env.PATH }}"
#         PYTHONPATH: "{{ user_home.stdout }}/{{ uvprog }}/{{ (item | basename | splitext)[0] }}"
#       register: pytest_results
#       loop: "{{ git_repos }}"
#       throttle: "{{ concurrent_runs }}"

#     - name: Print timestamp after running pytest
#       debug:
#         msg: "Finished pytest at {{ ansible_date_time.iso8601 }}"

# NEW ASYNC CODE - not inside a block
- name: Display successful repositories for async run
  debug:
    msg: "Repositories available for testing: {{ successful_repos | default(['None']) }}"

- name: Run pytest with virtual environment (asynchronous)
  shell: |
    echo "Starting pytest execution in $(pwd) at $(date)" > /tmp/pytest_debug_{{ item | basename | regex_replace('[^a-zA-Z0-9]', '') }}.log
    source .venv/bin/activate && {{ pytest_cmd }}
    echo "Completed pytest execution at $(date)" >> /tmp/pytest_debug_{{ item | basename | regex_replace('[^a-zA-Z0-9]', '') }}.log
  args:
    chdir: "{{ user_home.stdout }}/{{ uvprog }}/{{ (item | basename | splitext)[0] }}"
    executable: /bin/bash
  async: 1200
  poll: 0
  become: yes
  become_user: "{{ username }}"
  environment:
    PATH: "/home/kenneth/.local/bin:{{ ansible_env.PATH }}"
    PYTHONPATH: "{{ user_home.stdout }}/{{ uvprog }}/{{ (item | basename | splitext)[0] }}"
  register: async_jobs
  loop: "{{ git_repos }}"

- name: Wait for async jobs to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 120
  delay: 60
  loop: "{{ async_jobs.results }}"
  # quiet: true

- name: Print timestamp after running async pytest
  debug:
    msg: "Finished async pytest at {{ ansible_date_time.iso8601 }}"
